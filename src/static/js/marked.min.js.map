{"version":3,"file":"marked.min.js","mappings":"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","sources":["webpack://qlinxx-ai-vscode/webpack/universalModuleDefinition","webpack://qlinxx-ai-vscode/webpack/startup","webpack://qlinxx-ai-vscode/./node_modules/marked/lib/marked.cjs"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(self, () => {\nreturn ","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = {};\n__webpack_modules__[709](0, __webpack_exports__);\n","/**\n * marked v15.0.7 - a markdown parser\n * Copyright (c) 2011-2025, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\n'use strict';\n\n/**\n * Gets the original marked default options.\n */\nfunction _getDefaults() {\n    return {\n        async: false,\n        breaks: false,\n        extensions: null,\n        gfm: true,\n        hooks: null,\n        pedantic: false,\n        renderer: null,\n        silent: false,\n        tokenizer: null,\n        walkTokens: null,\n    };\n}\nexports.defaults = _getDefaults();\nfunction changeDefaults(newDefaults) {\n    exports.defaults = newDefaults;\n}\n\nconst noopTest = { exec: () => null };\nfunction edit(regex, opt = '') {\n    let source = typeof regex === 'string' ? regex : regex.source;\n    const obj = {\n        replace: (name, val) => {\n            let valSource = typeof val === 'string' ? val : val.source;\n            valSource = valSource.replace(other.caret, '$1');\n            source = source.replace(name, valSource);\n            return obj;\n        },\n        getRegex: () => {\n            return new RegExp(source, opt);\n        },\n    };\n    return obj;\n}\nconst other = {\n    codeRemoveIndent: /^(?: {1,4}| {0,3}\\t)/gm,\n    outputLinkReplace: /\\\\([\\[\\]])/g,\n    indentCodeCompensation: /^(\\s+)(?:```)/,\n    beginningSpace: /^\\s+/,\n    endingHash: /#$/,\n    startingSpaceChar: /^ /,\n    endingSpaceChar: / $/,\n    nonSpaceChar: /[^ ]/,\n    newLineCharGlobal: /\\n/g,\n    tabCharGlobal: /\\t/g,\n    multipleSpaceGlobal: /\\s+/g,\n    blankLine: /^[ \\t]*$/,\n    doubleBlankLine: /\\n[ \\t]*\\n[ \\t]*$/,\n    blockquoteStart: /^ {0,3}>/,\n    blockquoteSetextReplace: /\\n {0,3}((?:=+|-+) *)(?=\\n|$)/g,\n    blockquoteSetextReplace2: /^ {0,3}>[ \\t]?/gm,\n    listReplaceTabs: /^\\t+/,\n    listReplaceNesting: /^ {1,4}(?=( {4})*[^ ])/g,\n    listIsTask: /^\\[[ xX]\\] /,\n    listReplaceTask: /^\\[[ xX]\\] +/,\n    anyLine: /\\n.*\\n/,\n    hrefBrackets: /^<(.*)>$/,\n    tableDelimiter: /[:|]/,\n    tableAlignChars: /^\\||\\| *$/g,\n    tableRowBlankLine: /\\n[ \\t]*$/,\n    tableAlignRight: /^ *-+: *$/,\n    tableAlignCenter: /^ *:-+: *$/,\n    tableAlignLeft: /^ *:-+ *$/,\n    startATag: /^<a /i,\n    endATag: /^<\\/a>/i,\n    startPreScriptTag: /^<(pre|code|kbd|script)(\\s|>)/i,\n    endPreScriptTag: /^<\\/(pre|code|kbd|script)(\\s|>)/i,\n    startAngleBracket: /^</,\n    endAngleBracket: />$/,\n    pedanticHrefTitle: /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/,\n    unicodeAlphaNumeric: /[\\p{L}\\p{N}]/u,\n    escapeTest: /[&<>\"']/,\n    escapeReplace: /[&<>\"']/g,\n    escapeTestNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/,\n    escapeReplaceNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/g,\n    unescapeTest: /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig,\n    caret: /(^|[^\\[])\\^/g,\n    percentDecode: /%25/g,\n    findPipe: /\\|/g,\n    splitPipe: / \\|/,\n    slashPipe: /\\\\\\|/g,\n    carriageReturn: /\\r\\n|\\r/g,\n    spaceLine: /^ +$/gm,\n    notSpaceStart: /^\\S*/,\n    endingNewline: /\\n$/,\n    listItemRegex: (bull) => new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`),\n    nextBulletRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`),\n    hrRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`),\n    fencesBeginRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`),\n    headingBeginRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`),\n    htmlBeginRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}<(?:[a-z].*>|!--)`, 'i'),\n};\n/**\n * Block-Level Grammar\n */\nconst newline = /^(?:[ \\t]*(?:\\n|$))+/;\nconst blockCode = /^((?: {4}| {0,3}\\t)[^\\n]+(?:\\n(?:[ \\t]*(?:\\n|$))*)?)+/;\nconst fences = /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/;\nconst hr = /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/;\nconst heading = /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/;\nconst bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nconst lheadingCore = /^(?!bull |blockCode|fences|blockquote|heading|html|table)((?:.|\\n(?!\\s*?\\n|bull |blockCode|fences|blockquote|heading|html|table))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/;\nconst lheading = edit(lheadingCore)\n    .replace(/bull/g, bullet) // lists can interrupt\n    .replace(/blockCode/g, /(?: {4}| {0,3}\\t)/) // indented code blocks can interrupt\n    .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n    .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n    .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n    .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n    .replace(/\\|table/g, '') // table not in commonmark\n    .getRegex();\nconst lheadingGfm = edit(lheadingCore)\n    .replace(/bull/g, bullet) // lists can interrupt\n    .replace(/blockCode/g, /(?: {4}| {0,3}\\t)/) // indented code blocks can interrupt\n    .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n    .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n    .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n    .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n    .replace(/table/g, / {0,3}\\|?(?:[:\\- ]*\\|)+[\\:\\- ]*\\n/) // table can interrupt\n    .getRegex();\nconst _paragraph = /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/;\nconst blockText = /^[^\\n]+/;\nconst _blockLabel = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nconst def = edit(/^ {0,3}\\[(label)\\]: *(?:\\n[ \\t]*)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n[ \\t]*)?| *\\n[ \\t]*)(title))? *(?:\\n+|$)/)\n    .replace('label', _blockLabel)\n    .replace('title', /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/)\n    .getRegex();\nconst list = edit(/^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/)\n    .replace(/bull/g, bullet)\n    .getRegex();\nconst _tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n    + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n    + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n    + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n    + '|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title'\n    + '|tr|track|ul';\nconst _comment = /<!--(?:-?>|[\\s\\S]*?(?:-->|$))/;\nconst html = edit('^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (6)\n    + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (7) open tag\n    + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (7) closing tag\n    + ')', 'i')\n    .replace('comment', _comment)\n    .replace('tag', _tag)\n    .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst paragraph = edit(_paragraph)\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n    .replace('|table', '')\n    .replace('blockquote', ' {0,3}>')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockquote = edit(/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/)\n    .replace('paragraph', paragraph)\n    .getRegex();\n/**\n * Normal Block Grammar\n */\nconst blockNormal = {\n    blockquote,\n    code: blockCode,\n    def,\n    fences,\n    heading,\n    hr,\n    html,\n    lheading,\n    list,\n    newline,\n    paragraph,\n    table: noopTest,\n    text: blockText,\n};\n/**\n * GFM Block Grammar\n */\nconst gfmTable = edit('^ *([^\\\\n ].*)\\\\n' // Header\n    + ' {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)' // Align\n    + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)') // Cells\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('blockquote', ' {0,3}>')\n    .replace('code', '(?: {4}| {0,3}\\t)[^\\\\n]')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // tables can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockGfm = {\n    ...blockNormal,\n    lheading: lheadingGfm,\n    table: gfmTable,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n        .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n        .replace('table', gfmTable) // interrupt paragraphs with table\n        .replace('blockquote', ' {0,3}>')\n        .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n        .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n        .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n        .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n        .getRegex(),\n};\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\nconst blockPedantic = {\n    ...blockNormal,\n    html: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)'\n        + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n        + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n        .replace('comment', _comment)\n        .replace(/tag/g, '(?!(?:'\n        + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n        + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n        + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n        .getRegex(),\n    def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n    heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n    fences: noopTest, // fences not supported\n    lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' *#{1,6} *[^\\n]')\n        .replace('lheading', lheading)\n        .replace('|table', '')\n        .replace('blockquote', ' {0,3}>')\n        .replace('|fences', '')\n        .replace('|list', '')\n        .replace('|html', '')\n        .replace('|tag', '')\n        .getRegex(),\n};\n/**\n * Inline-Level Grammar\n */\nconst escape$1 = /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/;\nconst inlineCode = /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/;\nconst br = /^( {2,}|\\\\)\\n(?!\\s*$)/;\nconst inlineText = /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/;\n// list of unicode punctuation marks, plus any missing characters from CommonMark spec\nconst _punctuation = /[\\p{P}\\p{S}]/u;\nconst _punctuationOrSpace = /[\\s\\p{P}\\p{S}]/u;\nconst _notPunctuationOrSpace = /[^\\s\\p{P}\\p{S}]/u;\nconst punctuation = edit(/^((?![*_])punctSpace)/, 'u')\n    .replace(/punctSpace/g, _punctuationOrSpace).getRegex();\n// GFM allows ~ inside strong and em for strikethrough\nconst _punctuationGfmStrongEm = /(?!~)[\\p{P}\\p{S}]/u;\nconst _punctuationOrSpaceGfmStrongEm = /(?!~)[\\s\\p{P}\\p{S}]/u;\nconst _notPunctuationOrSpaceGfmStrongEm = /(?:[^\\s\\p{P}\\p{S}]|~)/u;\n// sequences em should skip over [title](link), `code`, <html>\nconst blockSkip = /\\[[^[\\]]*?\\]\\((?:\\\\.|[^\\\\\\(\\)]|\\((?:\\\\.|[^\\\\\\(\\)])*\\))*\\)|`[^`]*?`|<[^<>]*?>/g;\nconst emStrongLDelimCore = /^(?:\\*+(?:((?!\\*)punct)|[^\\s*]))|^_+(?:((?!_)punct)|([^\\s_]))/;\nconst emStrongLDelim = edit(emStrongLDelimCore, 'u')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst emStrongLDelimGfm = edit(emStrongLDelimCore, 'u')\n    .replace(/punct/g, _punctuationGfmStrongEm)\n    .getRegex();\nconst emStrongRDelimAstCore = '^[^_*]*?__[^_*]*?\\\\*[^_*]*?(?=__)' // Skip orphan inside strong\n    + '|[^*]+(?=[^*])' // Consume to delim\n    + '|(?!\\\\*)punct(\\\\*+)(?=[\\\\s]|$)' // (1) #*** can only be a Right Delimiter\n    + '|notPunctSpace(\\\\*+)(?!\\\\*)(?=punctSpace|$)' // (2) a***#, a*** can only be a Right Delimiter\n    + '|(?!\\\\*)punctSpace(\\\\*+)(?=notPunctSpace)' // (3) #***a, ***a can only be Left Delimiter\n    + '|[\\\\s](\\\\*+)(?!\\\\*)(?=punct)' // (4) ***# can only be Left Delimiter\n    + '|(?!\\\\*)punct(\\\\*+)(?!\\\\*)(?=punct)' // (5) #***# can be either Left or Right Delimiter\n    + '|notPunctSpace(\\\\*+)(?=notPunctSpace)'; // (6) a***a can be either Left or Right Delimiter\nconst emStrongRDelimAst = edit(emStrongRDelimAstCore, 'gu')\n    .replace(/notPunctSpace/g, _notPunctuationOrSpace)\n    .replace(/punctSpace/g, _punctuationOrSpace)\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst emStrongRDelimAstGfm = edit(emStrongRDelimAstCore, 'gu')\n    .replace(/notPunctSpace/g, _notPunctuationOrSpaceGfmStrongEm)\n    .replace(/punctSpace/g, _punctuationOrSpaceGfmStrongEm)\n    .replace(/punct/g, _punctuationGfmStrongEm)\n    .getRegex();\n// (6) Not allowed for _\nconst emStrongRDelimUnd = edit('^[^_*]*?\\\\*\\\\*[^_*]*?_[^_*]*?(?=\\\\*\\\\*)' // Skip orphan inside strong\n    + '|[^_]+(?=[^_])' // Consume to delim\n    + '|(?!_)punct(_+)(?=[\\\\s]|$)' // (1) #___ can only be a Right Delimiter\n    + '|notPunctSpace(_+)(?!_)(?=punctSpace|$)' // (2) a___#, a___ can only be a Right Delimiter\n    + '|(?!_)punctSpace(_+)(?=notPunctSpace)' // (3) #___a, ___a can only be Left Delimiter\n    + '|[\\\\s](_+)(?!_)(?=punct)' // (4) ___# can only be Left Delimiter\n    + '|(?!_)punct(_+)(?!_)(?=punct)', 'gu') // (5) #___# can be either Left or Right Delimiter\n    .replace(/notPunctSpace/g, _notPunctuationOrSpace)\n    .replace(/punctSpace/g, _punctuationOrSpace)\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst anyPunctuation = edit(/\\\\(punct)/, 'gu')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst autolink = edit(/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/)\n    .replace('scheme', /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/)\n    .replace('email', /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/)\n    .getRegex();\nconst _inlineComment = edit(_comment).replace('(?:-->|$)', '-->').getRegex();\nconst tag = edit('^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>') // CDATA section\n    .replace('comment', _inlineComment)\n    .replace('attribute', /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst _inlineLabel = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\nconst link = edit(/^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/)\n    .replace('label', _inlineLabel)\n    .replace('href', /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/)\n    .replace('title', /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/)\n    .getRegex();\nconst reflink = edit(/^!?\\[(label)\\]\\[(ref)\\]/)\n    .replace('label', _inlineLabel)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst nolink = edit(/^!?\\[(ref)\\](?:\\[\\])?/)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst reflinkSearch = edit('reflink|nolink(?!\\\\()', 'g')\n    .replace('reflink', reflink)\n    .replace('nolink', nolink)\n    .getRegex();\n/**\n * Normal Inline Grammar\n */\nconst inlineNormal = {\n    _backpedal: noopTest, // only used for GFM url\n    anyPunctuation,\n    autolink,\n    blockSkip,\n    br,\n    code: inlineCode,\n    del: noopTest,\n    emStrongLDelim,\n    emStrongRDelimAst,\n    emStrongRDelimUnd,\n    escape: escape$1,\n    link,\n    nolink,\n    punctuation,\n    reflink,\n    reflinkSearch,\n    tag,\n    text: inlineText,\n    url: noopTest,\n};\n/**\n * Pedantic Inline Grammar\n */\nconst inlinePedantic = {\n    ...inlineNormal,\n    link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n        .replace('label', _inlineLabel)\n        .getRegex(),\n    reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n        .replace('label', _inlineLabel)\n        .getRegex(),\n};\n/**\n * GFM Inline Grammar\n */\nconst inlineGfm = {\n    ...inlineNormal,\n    emStrongRDelimAst: emStrongRDelimAstGfm,\n    emStrongLDelim: emStrongLDelimGfm,\n    url: edit(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/, 'i')\n        .replace('email', /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/)\n        .getRegex(),\n    _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n    del: /^(~~?)(?=[^\\s~])((?:\\\\.|[^\\\\])*?(?:\\\\.|[^\\s~\\\\]))\\1(?=[^~]|$)/,\n    text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/,\n};\n/**\n * GFM + Line Breaks Inline Grammar\n */\nconst inlineBreaks = {\n    ...inlineGfm,\n    br: edit(br).replace('{2,}', '*').getRegex(),\n    text: edit(inlineGfm.text)\n        .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n        .replace(/\\{2,\\}/g, '*')\n        .getRegex(),\n};\n/**\n * exports\n */\nconst block = {\n    normal: blockNormal,\n    gfm: blockGfm,\n    pedantic: blockPedantic,\n};\nconst inline = {\n    normal: inlineNormal,\n    gfm: inlineGfm,\n    breaks: inlineBreaks,\n    pedantic: inlinePedantic,\n};\n\n/**\n * Helpers\n */\nconst escapeReplacements = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nfunction escape(html, encode) {\n    if (encode) {\n        if (other.escapeTest.test(html)) {\n            return html.replace(other.escapeReplace, getEscapeReplacement);\n        }\n    }\n    else {\n        if (other.escapeTestNoEncode.test(html)) {\n            return html.replace(other.escapeReplaceNoEncode, getEscapeReplacement);\n        }\n    }\n    return html;\n}\nfunction cleanUrl(href) {\n    try {\n        href = encodeURI(href).replace(other.percentDecode, '%');\n    }\n    catch {\n        return null;\n    }\n    return href;\n}\nfunction splitCells(tableRow, count) {\n    // ensure that every cell-delimiting pipe has a space\n    // before it to distinguish it from an escaped pipe\n    const row = tableRow.replace(other.findPipe, (match, offset, str) => {\n        let escaped = false;\n        let curr = offset;\n        while (--curr >= 0 && str[curr] === '\\\\')\n            escaped = !escaped;\n        if (escaped) {\n            // odd number of slashes means | is escaped\n            // so we leave it alone\n            return '|';\n        }\n        else {\n            // add space before unescaped |\n            return ' |';\n        }\n    }), cells = row.split(other.splitPipe);\n    let i = 0;\n    // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n    if (!cells[0].trim()) {\n        cells.shift();\n    }\n    if (cells.length > 0 && !cells.at(-1)?.trim()) {\n        cells.pop();\n    }\n    if (count) {\n        if (cells.length > count) {\n            cells.splice(count);\n        }\n        else {\n            while (cells.length < count)\n                cells.push('');\n        }\n    }\n    for (; i < cells.length; i++) {\n        // leading or trailing whitespace is ignored per the gfm spec\n        cells[i] = cells[i].trim().replace(other.slashPipe, '|');\n    }\n    return cells;\n}\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param str\n * @param c\n * @param invert Remove suffix of non-c chars instead. Default falsey.\n */\nfunction rtrim(str, c, invert) {\n    const l = str.length;\n    if (l === 0) {\n        return '';\n    }\n    // Length of suffix matching the invert condition.\n    let suffLen = 0;\n    // Step left until we fail to match the invert condition.\n    while (suffLen < l) {\n        const currChar = str.charAt(l - suffLen - 1);\n        if (currChar === c && true) {\n            suffLen++;\n        }\n        else {\n            break;\n        }\n    }\n    return str.slice(0, l - suffLen);\n}\nfunction findClosingBracket(str, b) {\n    if (str.indexOf(b[1]) === -1) {\n        return -1;\n    }\n    let level = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] === '\\\\') {\n            i++;\n        }\n        else if (str[i] === b[0]) {\n            level++;\n        }\n        else if (str[i] === b[1]) {\n            level--;\n            if (level < 0) {\n                return i;\n            }\n        }\n    }\n    return -1;\n}\n\nfunction outputLink(cap, link, raw, lexer, rules) {\n    const href = link.href;\n    const title = link.title || null;\n    const text = cap[1].replace(rules.other.outputLinkReplace, '$1');\n    if (cap[0].charAt(0) !== '!') {\n        lexer.state.inLink = true;\n        const token = {\n            type: 'link',\n            raw,\n            href,\n            title,\n            text,\n            tokens: lexer.inlineTokens(text),\n        };\n        lexer.state.inLink = false;\n        return token;\n    }\n    return {\n        type: 'image',\n        raw,\n        href,\n        title,\n        text,\n    };\n}\nfunction indentCodeCompensation(raw, text, rules) {\n    const matchIndentToCode = raw.match(rules.other.indentCodeCompensation);\n    if (matchIndentToCode === null) {\n        return text;\n    }\n    const indentToCode = matchIndentToCode[1];\n    return text\n        .split('\\n')\n        .map(node => {\n        const matchIndentInNode = node.match(rules.other.beginningSpace);\n        if (matchIndentInNode === null) {\n            return node;\n        }\n        const [indentInNode] = matchIndentInNode;\n        if (indentInNode.length >= indentToCode.length) {\n            return node.slice(indentToCode.length);\n        }\n        return node;\n    })\n        .join('\\n');\n}\n/**\n * Tokenizer\n */\nclass _Tokenizer {\n    options;\n    rules; // set by the lexer\n    lexer; // set by the lexer\n    constructor(options) {\n        this.options = options || exports.defaults;\n    }\n    space(src) {\n        const cap = this.rules.block.newline.exec(src);\n        if (cap && cap[0].length > 0) {\n            return {\n                type: 'space',\n                raw: cap[0],\n            };\n        }\n    }\n    code(src) {\n        const cap = this.rules.block.code.exec(src);\n        if (cap) {\n            const text = cap[0].replace(this.rules.other.codeRemoveIndent, '');\n            return {\n                type: 'code',\n                raw: cap[0],\n                codeBlockStyle: 'indented',\n                text: !this.options.pedantic\n                    ? rtrim(text, '\\n')\n                    : text,\n            };\n        }\n    }\n    fences(src) {\n        const cap = this.rules.block.fences.exec(src);\n        if (cap) {\n            const raw = cap[0];\n            const text = indentCodeCompensation(raw, cap[3] || '', this.rules);\n            return {\n                type: 'code',\n                raw,\n                lang: cap[2] ? cap[2].trim().replace(this.rules.inline.anyPunctuation, '$1') : cap[2],\n                text,\n            };\n        }\n    }\n    heading(src) {\n        const cap = this.rules.block.heading.exec(src);\n        if (cap) {\n            let text = cap[2].trim();\n            // remove trailing #s\n            if (this.rules.other.endingHash.test(text)) {\n                const trimmed = rtrim(text, '#');\n                if (this.options.pedantic) {\n                    text = trimmed.trim();\n                }\n                else if (!trimmed || this.rules.other.endingSpaceChar.test(trimmed)) {\n                    // CommonMark requires space before trailing #s\n                    text = trimmed.trim();\n                }\n            }\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[1].length,\n                text,\n                tokens: this.lexer.inline(text),\n            };\n        }\n    }\n    hr(src) {\n        const cap = this.rules.block.hr.exec(src);\n        if (cap) {\n            return {\n                type: 'hr',\n                raw: rtrim(cap[0], '\\n'),\n            };\n        }\n    }\n    blockquote(src) {\n        const cap = this.rules.block.blockquote.exec(src);\n        if (cap) {\n            let lines = rtrim(cap[0], '\\n').split('\\n');\n            let raw = '';\n            let text = '';\n            const tokens = [];\n            while (lines.length > 0) {\n                let inBlockquote = false;\n                const currentLines = [];\n                let i;\n                for (i = 0; i < lines.length; i++) {\n                    // get lines up to a continuation\n                    if (this.rules.other.blockquoteStart.test(lines[i])) {\n                        currentLines.push(lines[i]);\n                        inBlockquote = true;\n                    }\n                    else if (!inBlockquote) {\n                        currentLines.push(lines[i]);\n                    }\n                    else {\n                        break;\n                    }\n                }\n                lines = lines.slice(i);\n                const currentRaw = currentLines.join('\\n');\n                const currentText = currentRaw\n                    // precede setext continuation with 4 spaces so it isn't a setext\n                    .replace(this.rules.other.blockquoteSetextReplace, '\\n    $1')\n                    .replace(this.rules.other.blockquoteSetextReplace2, '');\n                raw = raw ? `${raw}\\n${currentRaw}` : currentRaw;\n                text = text ? `${text}\\n${currentText}` : currentText;\n                // parse blockquote lines as top level tokens\n                // merge paragraphs if this is a continuation\n                const top = this.lexer.state.top;\n                this.lexer.state.top = true;\n                this.lexer.blockTokens(currentText, tokens, true);\n                this.lexer.state.top = top;\n                // if there is no continuation then we are done\n                if (lines.length === 0) {\n                    break;\n                }\n                const lastToken = tokens.at(-1);\n                if (lastToken?.type === 'code') {\n                    // blockquote continuation cannot be preceded by a code block\n                    break;\n                }\n                else if (lastToken?.type === 'blockquote') {\n                    // include continuation in nested blockquote\n                    const oldToken = lastToken;\n                    const newText = oldToken.raw + '\\n' + lines.join('\\n');\n                    const newToken = this.blockquote(newText);\n                    tokens[tokens.length - 1] = newToken;\n                    raw = raw.substring(0, raw.length - oldToken.raw.length) + newToken.raw;\n                    text = text.substring(0, text.length - oldToken.text.length) + newToken.text;\n                    break;\n                }\n                else if (lastToken?.type === 'list') {\n                    // include continuation in nested list\n                    const oldToken = lastToken;\n                    const newText = oldToken.raw + '\\n' + lines.join('\\n');\n                    const newToken = this.list(newText);\n                    tokens[tokens.length - 1] = newToken;\n                    raw = raw.substring(0, raw.length - lastToken.raw.length) + newToken.raw;\n                    text = text.substring(0, text.length - oldToken.raw.length) + newToken.raw;\n                    lines = newText.substring(tokens.at(-1).raw.length).split('\\n');\n                    continue;\n                }\n            }\n            return {\n                type: 'blockquote',\n                raw,\n                tokens,\n                text,\n            };\n        }\n    }\n    list(src) {\n        let cap = this.rules.block.list.exec(src);\n        if (cap) {\n            let bull = cap[1].trim();\n            const isordered = bull.length > 1;\n            const list = {\n                type: 'list',\n                raw: '',\n                ordered: isordered,\n                start: isordered ? +bull.slice(0, -1) : '',\n                loose: false,\n                items: [],\n            };\n            bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n            if (this.options.pedantic) {\n                bull = isordered ? bull : '[*+-]';\n            }\n            // Get next list item\n            const itemRegex = this.rules.other.listItemRegex(bull);\n            let endsWithBlankLine = false;\n            // Check if current bullet point can start a new List Item\n            while (src) {\n                let endEarly = false;\n                let raw = '';\n                let itemContents = '';\n                if (!(cap = itemRegex.exec(src))) {\n                    break;\n                }\n                if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n                    break;\n                }\n                raw = cap[0];\n                src = src.substring(raw.length);\n                let line = cap[2].split('\\n', 1)[0].replace(this.rules.other.listReplaceTabs, (t) => ' '.repeat(3 * t.length));\n                let nextLine = src.split('\\n', 1)[0];\n                let blankLine = !line.trim();\n                let indent = 0;\n                if (this.options.pedantic) {\n                    indent = 2;\n                    itemContents = line.trimStart();\n                }\n                else if (blankLine) {\n                    indent = cap[1].length + 1;\n                }\n                else {\n                    indent = cap[2].search(this.rules.other.nonSpaceChar); // Find first non-space char\n                    indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n                    itemContents = line.slice(indent);\n                    indent += cap[1].length;\n                }\n                if (blankLine && this.rules.other.blankLine.test(nextLine)) { // Items begin with at most one blank line\n                    raw += nextLine + '\\n';\n                    src = src.substring(nextLine.length + 1);\n                    endEarly = true;\n                }\n                if (!endEarly) {\n                    const nextBulletRegex = this.rules.other.nextBulletRegex(indent);\n                    const hrRegex = this.rules.other.hrRegex(indent);\n                    const fencesBeginRegex = this.rules.other.fencesBeginRegex(indent);\n                    const headingBeginRegex = this.rules.other.headingBeginRegex(indent);\n                    const htmlBeginRegex = this.rules.other.htmlBeginRegex(indent);\n                    // Check if following lines should be included in List Item\n                    while (src) {\n                        const rawLine = src.split('\\n', 1)[0];\n                        let nextLineWithoutTabs;\n                        nextLine = rawLine;\n                        // Re-align to follow commonmark nesting rules\n                        if (this.options.pedantic) {\n                            nextLine = nextLine.replace(this.rules.other.listReplaceNesting, '  ');\n                            nextLineWithoutTabs = nextLine;\n                        }\n                        else {\n                            nextLineWithoutTabs = nextLine.replace(this.rules.other.tabCharGlobal, '    ');\n                        }\n                        // End list item if found code fences\n                        if (fencesBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new heading\n                        if (headingBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of html block\n                        if (htmlBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new bullet\n                        if (nextBulletRegex.test(nextLine)) {\n                            break;\n                        }\n                        // Horizontal rule found\n                        if (hrRegex.test(nextLine)) {\n                            break;\n                        }\n                        if (nextLineWithoutTabs.search(this.rules.other.nonSpaceChar) >= indent || !nextLine.trim()) { // Dedent if possible\n                            itemContents += '\\n' + nextLineWithoutTabs.slice(indent);\n                        }\n                        else {\n                            // not enough indentation\n                            if (blankLine) {\n                                break;\n                            }\n                            // paragraph continuation unless last line was a different block level element\n                            if (line.replace(this.rules.other.tabCharGlobal, '    ').search(this.rules.other.nonSpaceChar) >= 4) { // indented code block\n                                break;\n                            }\n                            if (fencesBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (headingBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (hrRegex.test(line)) {\n                                break;\n                            }\n                            itemContents += '\\n' + nextLine;\n                        }\n                        if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n                            blankLine = true;\n                        }\n                        raw += rawLine + '\\n';\n                        src = src.substring(rawLine.length + 1);\n                        line = nextLineWithoutTabs.slice(indent);\n                    }\n                }\n                if (!list.loose) {\n                    // If the previous item ended with a blank line, the list is loose\n                    if (endsWithBlankLine) {\n                        list.loose = true;\n                    }\n                    else if (this.rules.other.doubleBlankLine.test(raw)) {\n                        endsWithBlankLine = true;\n                    }\n                }\n                let istask = null;\n                let ischecked;\n                // Check for task list items\n                if (this.options.gfm) {\n                    istask = this.rules.other.listIsTask.exec(itemContents);\n                    if (istask) {\n                        ischecked = istask[0] !== '[ ] ';\n                        itemContents = itemContents.replace(this.rules.other.listReplaceTask, '');\n                    }\n                }\n                list.items.push({\n                    type: 'list_item',\n                    raw,\n                    task: !!istask,\n                    checked: ischecked,\n                    loose: false,\n                    text: itemContents,\n                    tokens: [],\n                });\n                list.raw += raw;\n            }\n            // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n            const lastItem = list.items.at(-1);\n            if (lastItem) {\n                lastItem.raw = lastItem.raw.trimEnd();\n                lastItem.text = lastItem.text.trimEnd();\n            }\n            else {\n                // not a list since there were no items\n                return;\n            }\n            list.raw = list.raw.trimEnd();\n            // Item child tokens handled here at end because we needed to have the final item to trim it first\n            for (let i = 0; i < list.items.length; i++) {\n                this.lexer.state.top = false;\n                list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n                if (!list.loose) {\n                    // Check if list should be loose\n                    const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n                    const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => this.rules.other.anyLine.test(t.raw));\n                    list.loose = hasMultipleLineBreaks;\n                }\n            }\n            // Set all items to loose if list is loose\n            if (list.loose) {\n                for (let i = 0; i < list.items.length; i++) {\n                    list.items[i].loose = true;\n                }\n            }\n            return list;\n        }\n    }\n    html(src) {\n        const cap = this.rules.block.html.exec(src);\n        if (cap) {\n            const token = {\n                type: 'html',\n                block: true,\n                raw: cap[0],\n                pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\n                text: cap[0],\n            };\n            return token;\n        }\n    }\n    def(src) {\n        const cap = this.rules.block.def.exec(src);\n        if (cap) {\n            const tag = cap[1].toLowerCase().replace(this.rules.other.multipleSpaceGlobal, ' ');\n            const href = cap[2] ? cap[2].replace(this.rules.other.hrefBrackets, '$1').replace(this.rules.inline.anyPunctuation, '$1') : '';\n            const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline.anyPunctuation, '$1') : cap[3];\n            return {\n                type: 'def',\n                tag,\n                raw: cap[0],\n                href,\n                title,\n            };\n        }\n    }\n    table(src) {\n        const cap = this.rules.block.table.exec(src);\n        if (!cap) {\n            return;\n        }\n        if (!this.rules.other.tableDelimiter.test(cap[2])) {\n            // delimiter row must have a pipe (|) or colon (:) otherwise it is a setext heading\n            return;\n        }\n        const headers = splitCells(cap[1]);\n        const aligns = cap[2].replace(this.rules.other.tableAlignChars, '').split('|');\n        const rows = cap[3]?.trim() ? cap[3].replace(this.rules.other.tableRowBlankLine, '').split('\\n') : [];\n        const item = {\n            type: 'table',\n            raw: cap[0],\n            header: [],\n            align: [],\n            rows: [],\n        };\n        if (headers.length !== aligns.length) {\n            // header and align columns must be equal, rows can be different.\n            return;\n        }\n        for (const align of aligns) {\n            if (this.rules.other.tableAlignRight.test(align)) {\n                item.align.push('right');\n            }\n            else if (this.rules.other.tableAlignCenter.test(align)) {\n                item.align.push('center');\n            }\n            else if (this.rules.other.tableAlignLeft.test(align)) {\n                item.align.push('left');\n            }\n            else {\n                item.align.push(null);\n            }\n        }\n        for (let i = 0; i < headers.length; i++) {\n            item.header.push({\n                text: headers[i],\n                tokens: this.lexer.inline(headers[i]),\n                header: true,\n                align: item.align[i],\n            });\n        }\n        for (const row of rows) {\n            item.rows.push(splitCells(row, item.header.length).map((cell, i) => {\n                return {\n                    text: cell,\n                    tokens: this.lexer.inline(cell),\n                    header: false,\n                    align: item.align[i],\n                };\n            }));\n        }\n        return item;\n    }\n    lheading(src) {\n        const cap = this.rules.block.lheading.exec(src);\n        if (cap) {\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[2].charAt(0) === '=' ? 1 : 2,\n                text: cap[1],\n                tokens: this.lexer.inline(cap[1]),\n            };\n        }\n    }\n    paragraph(src) {\n        const cap = this.rules.block.paragraph.exec(src);\n        if (cap) {\n            const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n                ? cap[1].slice(0, -1)\n                : cap[1];\n            return {\n                type: 'paragraph',\n                raw: cap[0],\n                text,\n                tokens: this.lexer.inline(text),\n            };\n        }\n    }\n    text(src) {\n        const cap = this.rules.block.text.exec(src);\n        if (cap) {\n            return {\n                type: 'text',\n                raw: cap[0],\n                text: cap[0],\n                tokens: this.lexer.inline(cap[0]),\n            };\n        }\n    }\n    escape(src) {\n        const cap = this.rules.inline.escape.exec(src);\n        if (cap) {\n            return {\n                type: 'escape',\n                raw: cap[0],\n                text: cap[1],\n            };\n        }\n    }\n    tag(src) {\n        const cap = this.rules.inline.tag.exec(src);\n        if (cap) {\n            if (!this.lexer.state.inLink && this.rules.other.startATag.test(cap[0])) {\n                this.lexer.state.inLink = true;\n            }\n            else if (this.lexer.state.inLink && this.rules.other.endATag.test(cap[0])) {\n                this.lexer.state.inLink = false;\n            }\n            if (!this.lexer.state.inRawBlock && this.rules.other.startPreScriptTag.test(cap[0])) {\n                this.lexer.state.inRawBlock = true;\n            }\n            else if (this.lexer.state.inRawBlock && this.rules.other.endPreScriptTag.test(cap[0])) {\n                this.lexer.state.inRawBlock = false;\n            }\n            return {\n                type: 'html',\n                raw: cap[0],\n                inLink: this.lexer.state.inLink,\n                inRawBlock: this.lexer.state.inRawBlock,\n                block: false,\n                text: cap[0],\n            };\n        }\n    }\n    link(src) {\n        const cap = this.rules.inline.link.exec(src);\n        if (cap) {\n            const trimmedUrl = cap[2].trim();\n            if (!this.options.pedantic && this.rules.other.startAngleBracket.test(trimmedUrl)) {\n                // commonmark requires matching angle brackets\n                if (!(this.rules.other.endAngleBracket.test(trimmedUrl))) {\n                    return;\n                }\n                // ending angle bracket cannot be escaped\n                const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n                if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n                    return;\n                }\n            }\n            else {\n                // find closing parenthesis\n                const lastParenIndex = findClosingBracket(cap[2], '()');\n                if (lastParenIndex > -1) {\n                    const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n                    const linkLen = start + cap[1].length + lastParenIndex;\n                    cap[2] = cap[2].substring(0, lastParenIndex);\n                    cap[0] = cap[0].substring(0, linkLen).trim();\n                    cap[3] = '';\n                }\n            }\n            let href = cap[2];\n            let title = '';\n            if (this.options.pedantic) {\n                // split pedantic href and title\n                const link = this.rules.other.pedanticHrefTitle.exec(href);\n                if (link) {\n                    href = link[1];\n                    title = link[3];\n                }\n            }\n            else {\n                title = cap[3] ? cap[3].slice(1, -1) : '';\n            }\n            href = href.trim();\n            if (this.rules.other.startAngleBracket.test(href)) {\n                if (this.options.pedantic && !(this.rules.other.endAngleBracket.test(trimmedUrl))) {\n                    // pedantic allows starting angle bracket without ending angle bracket\n                    href = href.slice(1);\n                }\n                else {\n                    href = href.slice(1, -1);\n                }\n            }\n            return outputLink(cap, {\n                href: href ? href.replace(this.rules.inline.anyPunctuation, '$1') : href,\n                title: title ? title.replace(this.rules.inline.anyPunctuation, '$1') : title,\n            }, cap[0], this.lexer, this.rules);\n        }\n    }\n    reflink(src, links) {\n        let cap;\n        if ((cap = this.rules.inline.reflink.exec(src))\n            || (cap = this.rules.inline.nolink.exec(src))) {\n            const linkString = (cap[2] || cap[1]).replace(this.rules.other.multipleSpaceGlobal, ' ');\n            const link = links[linkString.toLowerCase()];\n            if (!link) {\n                const text = cap[0].charAt(0);\n                return {\n                    type: 'text',\n                    raw: text,\n                    text,\n                };\n            }\n            return outputLink(cap, link, cap[0], this.lexer, this.rules);\n        }\n    }\n    emStrong(src, maskedSrc, prevChar = '') {\n        let match = this.rules.inline.emStrongLDelim.exec(src);\n        if (!match)\n            return;\n        // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n        if (match[3] && prevChar.match(this.rules.other.unicodeAlphaNumeric))\n            return;\n        const nextChar = match[1] || match[2] || '';\n        if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n            // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)\n            const lLength = [...match[0]].length - 1;\n            let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n            const endReg = match[0][0] === '*' ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;\n            endReg.lastIndex = 0;\n            // Clip maskedSrc to same section of string as src (move to lexer?)\n            maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n            while ((match = endReg.exec(maskedSrc)) != null) {\n                rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n                if (!rDelim)\n                    continue; // skip single * in __abc*abc__\n                rLength = [...rDelim].length;\n                if (match[3] || match[4]) { // found another Left Delim\n                    delimTotal += rLength;\n                    continue;\n                }\n                else if (match[5] || match[6]) { // either Left or Right Delim\n                    if (lLength % 3 && !((lLength + rLength) % 3)) {\n                        midDelimTotal += rLength;\n                        continue; // CommonMark Emphasis Rules 9-10\n                    }\n                }\n                delimTotal -= rLength;\n                if (delimTotal > 0)\n                    continue; // Haven't found enough closing delimiters\n                // Remove extra characters. *a*** -> *a*\n                rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n                // char length can be >1 for unicode characters;\n                const lastCharLength = [...match[0]][0].length;\n                const raw = src.slice(0, lLength + match.index + lastCharLength + rLength);\n                // Create `em` if smallest delimiter has odd char count. *a***\n                if (Math.min(lLength, rLength) % 2) {\n                    const text = raw.slice(1, -1);\n                    return {\n                        type: 'em',\n                        raw,\n                        text,\n                        tokens: this.lexer.inlineTokens(text),\n                    };\n                }\n                // Create 'strong' if smallest delimiter has even char count. **a***\n                const text = raw.slice(2, -2);\n                return {\n                    type: 'strong',\n                    raw,\n                    text,\n                    tokens: this.lexer.inlineTokens(text),\n                };\n            }\n        }\n    }\n    codespan(src) {\n        const cap = this.rules.inline.code.exec(src);\n        if (cap) {\n            let text = cap[2].replace(this.rules.other.newLineCharGlobal, ' ');\n            const hasNonSpaceChars = this.rules.other.nonSpaceChar.test(text);\n            const hasSpaceCharsOnBothEnds = this.rules.other.startingSpaceChar.test(text) && this.rules.other.endingSpaceChar.test(text);\n            if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n                text = text.substring(1, text.length - 1);\n            }\n            return {\n                type: 'codespan',\n                raw: cap[0],\n                text,\n            };\n        }\n    }\n    br(src) {\n        const cap = this.rules.inline.br.exec(src);\n        if (cap) {\n            return {\n                type: 'br',\n                raw: cap[0],\n            };\n        }\n    }\n    del(src) {\n        const cap = this.rules.inline.del.exec(src);\n        if (cap) {\n            return {\n                type: 'del',\n                raw: cap[0],\n                text: cap[2],\n                tokens: this.lexer.inlineTokens(cap[2]),\n            };\n        }\n    }\n    autolink(src) {\n        const cap = this.rules.inline.autolink.exec(src);\n        if (cap) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = cap[1];\n                href = 'mailto:' + text;\n            }\n            else {\n                text = cap[1];\n                href = text;\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text,\n                    },\n                ],\n            };\n        }\n    }\n    url(src) {\n        let cap;\n        if (cap = this.rules.inline.url.exec(src)) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = cap[0];\n                href = 'mailto:' + text;\n            }\n            else {\n                // do extended autolink path validation\n                let prevCapZero;\n                do {\n                    prevCapZero = cap[0];\n                    cap[0] = this.rules.inline._backpedal.exec(cap[0])?.[0] ?? '';\n                } while (prevCapZero !== cap[0]);\n                text = cap[0];\n                if (cap[1] === 'www.') {\n                    href = 'http://' + cap[0];\n                }\n                else {\n                    href = cap[0];\n                }\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text,\n                    },\n                ],\n            };\n        }\n    }\n    inlineText(src) {\n        const cap = this.rules.inline.text.exec(src);\n        if (cap) {\n            const escaped = this.lexer.state.inRawBlock;\n            return {\n                type: 'text',\n                raw: cap[0],\n                text: cap[0],\n                escaped,\n            };\n        }\n    }\n}\n\n/**\n * Block Lexer\n */\nclass _Lexer {\n    tokens;\n    options;\n    state;\n    tokenizer;\n    inlineQueue;\n    constructor(options) {\n        // TokenList cannot be created in one go\n        this.tokens = [];\n        this.tokens.links = Object.create(null);\n        this.options = options || exports.defaults;\n        this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n        this.tokenizer = this.options.tokenizer;\n        this.tokenizer.options = this.options;\n        this.tokenizer.lexer = this;\n        this.inlineQueue = [];\n        this.state = {\n            inLink: false,\n            inRawBlock: false,\n            top: true,\n        };\n        const rules = {\n            other,\n            block: block.normal,\n            inline: inline.normal,\n        };\n        if (this.options.pedantic) {\n            rules.block = block.pedantic;\n            rules.inline = inline.pedantic;\n        }\n        else if (this.options.gfm) {\n            rules.block = block.gfm;\n            if (this.options.breaks) {\n                rules.inline = inline.breaks;\n            }\n            else {\n                rules.inline = inline.gfm;\n            }\n        }\n        this.tokenizer.rules = rules;\n    }\n    /**\n     * Expose Rules\n     */\n    static get rules() {\n        return {\n            block,\n            inline,\n        };\n    }\n    /**\n     * Static Lex Method\n     */\n    static lex(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.lex(src);\n    }\n    /**\n     * Static Lex Inline Method\n     */\n    static lexInline(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.inlineTokens(src);\n    }\n    /**\n     * Preprocessing\n     */\n    lex(src) {\n        src = src.replace(other.carriageReturn, '\\n');\n        this.blockTokens(src, this.tokens);\n        for (let i = 0; i < this.inlineQueue.length; i++) {\n            const next = this.inlineQueue[i];\n            this.inlineTokens(next.src, next.tokens);\n        }\n        this.inlineQueue = [];\n        return this.tokens;\n    }\n    blockTokens(src, tokens = [], lastParagraphClipped = false) {\n        if (this.options.pedantic) {\n            src = src.replace(other.tabCharGlobal, '    ').replace(other.spaceLine, '');\n        }\n        while (src) {\n            let token;\n            if (this.options.extensions?.block?.some((extTokenizer) => {\n                if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    return true;\n                }\n                return false;\n            })) {\n                continue;\n            }\n            // newline\n            if (token = this.tokenizer.space(src)) {\n                src = src.substring(token.raw.length);\n                const lastToken = tokens.at(-1);\n                if (token.raw.length === 1 && lastToken !== undefined) {\n                    // if there's a single \\n as a spacer, it's terminating the last line,\n                    // so move it there so that we don't get unnecessary paragraph tags\n                    lastToken.raw += '\\n';\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.code(src)) {\n                src = src.substring(token.raw.length);\n                const lastToken = tokens.at(-1);\n                // An indented code block cannot interrupt a paragraph.\n                if (lastToken?.type === 'paragraph' || lastToken?.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.at(-1).src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // fences\n            if (token = this.tokenizer.fences(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // heading\n            if (token = this.tokenizer.heading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // hr\n            if (token = this.tokenizer.hr(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // blockquote\n            if (token = this.tokenizer.blockquote(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // list\n            if (token = this.tokenizer.list(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // html\n            if (token = this.tokenizer.html(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // def\n            if (token = this.tokenizer.def(src)) {\n                src = src.substring(token.raw.length);\n                const lastToken = tokens.at(-1);\n                if (lastToken?.type === 'paragraph' || lastToken?.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.raw;\n                    this.inlineQueue.at(-1).src = lastToken.text;\n                }\n                else if (!this.tokens.links[token.tag]) {\n                    this.tokens.links[token.tag] = {\n                        href: token.href,\n                        title: token.title,\n                    };\n                }\n                continue;\n            }\n            // table (gfm)\n            if (token = this.tokenizer.table(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // lheading\n            if (token = this.tokenizer.lheading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // top-level paragraph\n            // prevent paragraph consuming extensions by clipping 'src' to extension start\n            let cutSrc = src;\n            if (this.options.extensions?.startBlock) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startBlock.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n                const lastToken = tokens.at(-1);\n                if (lastParagraphClipped && lastToken?.type === 'paragraph') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue.at(-1).src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                lastParagraphClipped = cutSrc.length !== src.length;\n                src = src.substring(token.raw.length);\n                continue;\n            }\n            // text\n            if (token = this.tokenizer.text(src)) {\n                src = src.substring(token.raw.length);\n                const lastToken = tokens.at(-1);\n                if (lastToken?.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue.at(-1).src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        this.state.top = true;\n        return tokens;\n    }\n    inline(src, tokens = []) {\n        this.inlineQueue.push({ src, tokens });\n        return tokens;\n    }\n    /**\n     * Lexing/Compiling\n     */\n    inlineTokens(src, tokens = []) {\n        // String with links masked to avoid interference with em and strong\n        let maskedSrc = src;\n        let match = null;\n        // Mask out reflinks\n        if (this.tokens.links) {\n            const links = Object.keys(this.tokens.links);\n            if (links.length > 0) {\n                while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n                    if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n                        maskedSrc = maskedSrc.slice(0, match.index)\n                            + '[' + 'a'.repeat(match[0].length - 2) + ']'\n                            + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n                    }\n                }\n            }\n        }\n        // Mask out other blocks\n        while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n        }\n        // Mask out escaped characters\n        while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n        }\n        let keepPrevChar = false;\n        let prevChar = '';\n        while (src) {\n            if (!keepPrevChar) {\n                prevChar = '';\n            }\n            keepPrevChar = false;\n            let token;\n            // extensions\n            if (this.options.extensions?.inline?.some((extTokenizer) => {\n                if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    return true;\n                }\n                return false;\n            })) {\n                continue;\n            }\n            // escape\n            if (token = this.tokenizer.escape(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // tag\n            if (token = this.tokenizer.tag(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // link\n            if (token = this.tokenizer.link(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // reflink, nolink\n            if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n                src = src.substring(token.raw.length);\n                const lastToken = tokens.at(-1);\n                if (token.type === 'text' && lastToken?.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // em & strong\n            if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.codespan(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // br\n            if (token = this.tokenizer.br(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // del (gfm)\n            if (token = this.tokenizer.del(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // autolink\n            if (token = this.tokenizer.autolink(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // url (gfm)\n            if (!this.state.inLink && (token = this.tokenizer.url(src))) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // text\n            // prevent inlineText consuming extensions by clipping 'src' to extension start\n            let cutSrc = src;\n            if (this.options.extensions?.startInline) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startInline.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (token = this.tokenizer.inlineText(cutSrc)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n                    prevChar = token.raw.slice(-1);\n                }\n                keepPrevChar = true;\n                const lastToken = tokens.at(-1);\n                if (lastToken?.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        return tokens;\n    }\n}\n\n/**\n * Renderer\n */\nclass _Renderer {\n    options;\n    parser; // set by the parser\n    constructor(options) {\n        this.options = options || exports.defaults;\n    }\n    space(token) {\n        return '';\n    }\n    code({ text, lang, escaped }) {\n        const langString = (lang || '').match(other.notSpaceStart)?.[0];\n        const code = text.replace(other.endingNewline, '') + '\\n';\n        if (!langString) {\n            return '<pre><code>'\n                + (escaped ? code : escape(code, true))\n                + '</code></pre>\\n';\n        }\n        return '<pre><code class=\"language-'\n            + escape(langString)\n            + '\">'\n            + (escaped ? code : escape(code, true))\n            + '</code></pre>\\n';\n    }\n    blockquote({ tokens }) {\n        const body = this.parser.parse(tokens);\n        return `<blockquote>\\n${body}</blockquote>\\n`;\n    }\n    html({ text }) {\n        return text;\n    }\n    heading({ tokens, depth }) {\n        return `<h${depth}>${this.parser.parseInline(tokens)}</h${depth}>\\n`;\n    }\n    hr(token) {\n        return '<hr>\\n';\n    }\n    list(token) {\n        const ordered = token.ordered;\n        const start = token.start;\n        let body = '';\n        for (let j = 0; j < token.items.length; j++) {\n            const item = token.items[j];\n            body += this.listitem(item);\n        }\n        const type = ordered ? 'ol' : 'ul';\n        const startAttr = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n        return '<' + type + startAttr + '>\\n' + body + '</' + type + '>\\n';\n    }\n    listitem(item) {\n        let itemBody = '';\n        if (item.task) {\n            const checkbox = this.checkbox({ checked: !!item.checked });\n            if (item.loose) {\n                if (item.tokens[0]?.type === 'paragraph') {\n                    item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                    if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                        item.tokens[0].tokens[0].text = checkbox + ' ' + escape(item.tokens[0].tokens[0].text);\n                        item.tokens[0].tokens[0].escaped = true;\n                    }\n                }\n                else {\n                    item.tokens.unshift({\n                        type: 'text',\n                        raw: checkbox + ' ',\n                        text: checkbox + ' ',\n                        escaped: true,\n                    });\n                }\n            }\n            else {\n                itemBody += checkbox + ' ';\n            }\n        }\n        itemBody += this.parser.parse(item.tokens, !!item.loose);\n        return `<li>${itemBody}</li>\\n`;\n    }\n    checkbox({ checked }) {\n        return '<input '\n            + (checked ? 'checked=\"\" ' : '')\n            + 'disabled=\"\" type=\"checkbox\">';\n    }\n    paragraph({ tokens }) {\n        return `<p>${this.parser.parseInline(tokens)}</p>\\n`;\n    }\n    table(token) {\n        let header = '';\n        // header\n        let cell = '';\n        for (let j = 0; j < token.header.length; j++) {\n            cell += this.tablecell(token.header[j]);\n        }\n        header += this.tablerow({ text: cell });\n        let body = '';\n        for (let j = 0; j < token.rows.length; j++) {\n            const row = token.rows[j];\n            cell = '';\n            for (let k = 0; k < row.length; k++) {\n                cell += this.tablecell(row[k]);\n            }\n            body += this.tablerow({ text: cell });\n        }\n        if (body)\n            body = `<tbody>${body}</tbody>`;\n        return '<table>\\n'\n            + '<thead>\\n'\n            + header\n            + '</thead>\\n'\n            + body\n            + '</table>\\n';\n    }\n    tablerow({ text }) {\n        return `<tr>\\n${text}</tr>\\n`;\n    }\n    tablecell(token) {\n        const content = this.parser.parseInline(token.tokens);\n        const type = token.header ? 'th' : 'td';\n        const tag = token.align\n            ? `<${type} align=\"${token.align}\">`\n            : `<${type}>`;\n        return tag + content + `</${type}>\\n`;\n    }\n    /**\n     * span level renderer\n     */\n    strong({ tokens }) {\n        return `<strong>${this.parser.parseInline(tokens)}</strong>`;\n    }\n    em({ tokens }) {\n        return `<em>${this.parser.parseInline(tokens)}</em>`;\n    }\n    codespan({ text }) {\n        return `<code>${escape(text, true)}</code>`;\n    }\n    br(token) {\n        return '<br>';\n    }\n    del({ tokens }) {\n        return `<del>${this.parser.parseInline(tokens)}</del>`;\n    }\n    link({ href, title, tokens }) {\n        const text = this.parser.parseInline(tokens);\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = '<a href=\"' + href + '\"';\n        if (title) {\n            out += ' title=\"' + (escape(title)) + '\"';\n        }\n        out += '>' + text + '</a>';\n        return out;\n    }\n    image({ href, title, text }) {\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return escape(text);\n        }\n        href = cleanHref;\n        let out = `<img src=\"${href}\" alt=\"${text}\"`;\n        if (title) {\n            out += ` title=\"${escape(title)}\"`;\n        }\n        out += '>';\n        return out;\n    }\n    text(token) {\n        return 'tokens' in token && token.tokens\n            ? this.parser.parseInline(token.tokens)\n            : ('escaped' in token && token.escaped ? token.text : escape(token.text));\n    }\n}\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nclass _TextRenderer {\n    // no need for block level renderers\n    strong({ text }) {\n        return text;\n    }\n    em({ text }) {\n        return text;\n    }\n    codespan({ text }) {\n        return text;\n    }\n    del({ text }) {\n        return text;\n    }\n    html({ text }) {\n        return text;\n    }\n    text({ text }) {\n        return text;\n    }\n    link({ text }) {\n        return '' + text;\n    }\n    image({ text }) {\n        return '' + text;\n    }\n    br() {\n        return '';\n    }\n}\n\n/**\n * Parsing & Compiling\n */\nclass _Parser {\n    options;\n    renderer;\n    textRenderer;\n    constructor(options) {\n        this.options = options || exports.defaults;\n        this.options.renderer = this.options.renderer || new _Renderer();\n        this.renderer = this.options.renderer;\n        this.renderer.options = this.options;\n        this.renderer.parser = this;\n        this.textRenderer = new _TextRenderer();\n    }\n    /**\n     * Static Parse Method\n     */\n    static parse(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parse(tokens);\n    }\n    /**\n     * Static Parse Inline Method\n     */\n    static parseInline(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parseInline(tokens);\n    }\n    /**\n     * Parse Loop\n     */\n    parse(tokens, top = true) {\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const anyToken = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions?.renderers?.[anyToken.type]) {\n                const genericToken = anyToken;\n                const ret = this.options.extensions.renderers[genericToken.type].call({ parser: this }, genericToken);\n                if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(genericToken.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            const token = anyToken;\n            switch (token.type) {\n                case 'space': {\n                    out += this.renderer.space(token);\n                    continue;\n                }\n                case 'hr': {\n                    out += this.renderer.hr(token);\n                    continue;\n                }\n                case 'heading': {\n                    out += this.renderer.heading(token);\n                    continue;\n                }\n                case 'code': {\n                    out += this.renderer.code(token);\n                    continue;\n                }\n                case 'table': {\n                    out += this.renderer.table(token);\n                    continue;\n                }\n                case 'blockquote': {\n                    out += this.renderer.blockquote(token);\n                    continue;\n                }\n                case 'list': {\n                    out += this.renderer.list(token);\n                    continue;\n                }\n                case 'html': {\n                    out += this.renderer.html(token);\n                    continue;\n                }\n                case 'paragraph': {\n                    out += this.renderer.paragraph(token);\n                    continue;\n                }\n                case 'text': {\n                    let textToken = token;\n                    let body = this.renderer.text(textToken);\n                    while (i + 1 < tokens.length && tokens[i + 1].type === 'text') {\n                        textToken = tokens[++i];\n                        body += '\\n' + this.renderer.text(textToken);\n                    }\n                    if (top) {\n                        out += this.renderer.paragraph({\n                            type: 'paragraph',\n                            raw: body,\n                            text: body,\n                            tokens: [{ type: 'text', raw: body, text: body, escaped: true }],\n                        });\n                    }\n                    else {\n                        out += body;\n                    }\n                    continue;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n    /**\n     * Parse Inline Tokens\n     */\n    parseInline(tokens, renderer = this.renderer) {\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const anyToken = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions?.renderers?.[anyToken.type]) {\n                const ret = this.options.extensions.renderers[anyToken.type].call({ parser: this }, anyToken);\n                if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(anyToken.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            const token = anyToken;\n            switch (token.type) {\n                case 'escape': {\n                    out += renderer.text(token);\n                    break;\n                }\n                case 'html': {\n                    out += renderer.html(token);\n                    break;\n                }\n                case 'link': {\n                    out += renderer.link(token);\n                    break;\n                }\n                case 'image': {\n                    out += renderer.image(token);\n                    break;\n                }\n                case 'strong': {\n                    out += renderer.strong(token);\n                    break;\n                }\n                case 'em': {\n                    out += renderer.em(token);\n                    break;\n                }\n                case 'codespan': {\n                    out += renderer.codespan(token);\n                    break;\n                }\n                case 'br': {\n                    out += renderer.br(token);\n                    break;\n                }\n                case 'del': {\n                    out += renderer.del(token);\n                    break;\n                }\n                case 'text': {\n                    out += renderer.text(token);\n                    break;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n}\n\nclass _Hooks {\n    options;\n    block;\n    constructor(options) {\n        this.options = options || exports.defaults;\n    }\n    static passThroughHooks = new Set([\n        'preprocess',\n        'postprocess',\n        'processAllTokens',\n    ]);\n    /**\n     * Process markdown before marked\n     */\n    preprocess(markdown) {\n        return markdown;\n    }\n    /**\n     * Process HTML after marked is finished\n     */\n    postprocess(html) {\n        return html;\n    }\n    /**\n     * Process all tokens before walk tokens\n     */\n    processAllTokens(tokens) {\n        return tokens;\n    }\n    /**\n     * Provide function to tokenize markdown\n     */\n    provideLexer() {\n        return this.block ? _Lexer.lex : _Lexer.lexInline;\n    }\n    /**\n     * Provide function to parse tokens\n     */\n    provideParser() {\n        return this.block ? _Parser.parse : _Parser.parseInline;\n    }\n}\n\nclass Marked {\n    defaults = _getDefaults();\n    options = this.setOptions;\n    parse = this.parseMarkdown(true);\n    parseInline = this.parseMarkdown(false);\n    Parser = _Parser;\n    Renderer = _Renderer;\n    TextRenderer = _TextRenderer;\n    Lexer = _Lexer;\n    Tokenizer = _Tokenizer;\n    Hooks = _Hooks;\n    constructor(...args) {\n        this.use(...args);\n    }\n    /**\n     * Run callback for every token\n     */\n    walkTokens(tokens, callback) {\n        let values = [];\n        for (const token of tokens) {\n            values = values.concat(callback.call(this, token));\n            switch (token.type) {\n                case 'table': {\n                    const tableToken = token;\n                    for (const cell of tableToken.header) {\n                        values = values.concat(this.walkTokens(cell.tokens, callback));\n                    }\n                    for (const row of tableToken.rows) {\n                        for (const cell of row) {\n                            values = values.concat(this.walkTokens(cell.tokens, callback));\n                        }\n                    }\n                    break;\n                }\n                case 'list': {\n                    const listToken = token;\n                    values = values.concat(this.walkTokens(listToken.items, callback));\n                    break;\n                }\n                default: {\n                    const genericToken = token;\n                    if (this.defaults.extensions?.childTokens?.[genericToken.type]) {\n                        this.defaults.extensions.childTokens[genericToken.type].forEach((childTokens) => {\n                            const tokens = genericToken[childTokens].flat(Infinity);\n                            values = values.concat(this.walkTokens(tokens, callback));\n                        });\n                    }\n                    else if (genericToken.tokens) {\n                        values = values.concat(this.walkTokens(genericToken.tokens, callback));\n                    }\n                }\n            }\n        }\n        return values;\n    }\n    use(...args) {\n        const extensions = this.defaults.extensions || { renderers: {}, childTokens: {} };\n        args.forEach((pack) => {\n            // copy options to new object\n            const opts = { ...pack };\n            // set async to true if it was set to true before\n            opts.async = this.defaults.async || opts.async || false;\n            // ==-- Parse \"addon\" extensions --== //\n            if (pack.extensions) {\n                pack.extensions.forEach((ext) => {\n                    if (!ext.name) {\n                        throw new Error('extension name required');\n                    }\n                    if ('renderer' in ext) { // Renderer extensions\n                        const prevRenderer = extensions.renderers[ext.name];\n                        if (prevRenderer) {\n                            // Replace extension with func to run new extension but fall back if false\n                            extensions.renderers[ext.name] = function (...args) {\n                                let ret = ext.renderer.apply(this, args);\n                                if (ret === false) {\n                                    ret = prevRenderer.apply(this, args);\n                                }\n                                return ret;\n                            };\n                        }\n                        else {\n                            extensions.renderers[ext.name] = ext.renderer;\n                        }\n                    }\n                    if ('tokenizer' in ext) { // Tokenizer Extensions\n                        if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n                            throw new Error(\"extension level must be 'block' or 'inline'\");\n                        }\n                        const extLevel = extensions[ext.level];\n                        if (extLevel) {\n                            extLevel.unshift(ext.tokenizer);\n                        }\n                        else {\n                            extensions[ext.level] = [ext.tokenizer];\n                        }\n                        if (ext.start) { // Function to check for start of token\n                            if (ext.level === 'block') {\n                                if (extensions.startBlock) {\n                                    extensions.startBlock.push(ext.start);\n                                }\n                                else {\n                                    extensions.startBlock = [ext.start];\n                                }\n                            }\n                            else if (ext.level === 'inline') {\n                                if (extensions.startInline) {\n                                    extensions.startInline.push(ext.start);\n                                }\n                                else {\n                                    extensions.startInline = [ext.start];\n                                }\n                            }\n                        }\n                    }\n                    if ('childTokens' in ext && ext.childTokens) { // Child tokens to be visited by walkTokens\n                        extensions.childTokens[ext.name] = ext.childTokens;\n                    }\n                });\n                opts.extensions = extensions;\n            }\n            // ==-- Parse \"overwrite\" extensions --== //\n            if (pack.renderer) {\n                const renderer = this.defaults.renderer || new _Renderer(this.defaults);\n                for (const prop in pack.renderer) {\n                    if (!(prop in renderer)) {\n                        throw new Error(`renderer '${prop}' does not exist`);\n                    }\n                    if (['options', 'parser'].includes(prop)) {\n                        // ignore options property\n                        continue;\n                    }\n                    const rendererProp = prop;\n                    const rendererFunc = pack.renderer[rendererProp];\n                    const prevRenderer = renderer[rendererProp];\n                    // Replace renderer with func to run extension, but fall back if false\n                    renderer[rendererProp] = (...args) => {\n                        let ret = rendererFunc.apply(renderer, args);\n                        if (ret === false) {\n                            ret = prevRenderer.apply(renderer, args);\n                        }\n                        return ret || '';\n                    };\n                }\n                opts.renderer = renderer;\n            }\n            if (pack.tokenizer) {\n                const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n                for (const prop in pack.tokenizer) {\n                    if (!(prop in tokenizer)) {\n                        throw new Error(`tokenizer '${prop}' does not exist`);\n                    }\n                    if (['options', 'rules', 'lexer'].includes(prop)) {\n                        // ignore options, rules, and lexer properties\n                        continue;\n                    }\n                    const tokenizerProp = prop;\n                    const tokenizerFunc = pack.tokenizer[tokenizerProp];\n                    const prevTokenizer = tokenizer[tokenizerProp];\n                    // Replace tokenizer with func to run extension, but fall back if false\n                    // @ts-expect-error cannot type tokenizer function dynamically\n                    tokenizer[tokenizerProp] = (...args) => {\n                        let ret = tokenizerFunc.apply(tokenizer, args);\n                        if (ret === false) {\n                            ret = prevTokenizer.apply(tokenizer, args);\n                        }\n                        return ret;\n                    };\n                }\n                opts.tokenizer = tokenizer;\n            }\n            // ==-- Parse Hooks extensions --== //\n            if (pack.hooks) {\n                const hooks = this.defaults.hooks || new _Hooks();\n                for (const prop in pack.hooks) {\n                    if (!(prop in hooks)) {\n                        throw new Error(`hook '${prop}' does not exist`);\n                    }\n                    if (['options', 'block'].includes(prop)) {\n                        // ignore options and block properties\n                        continue;\n                    }\n                    const hooksProp = prop;\n                    const hooksFunc = pack.hooks[hooksProp];\n                    const prevHook = hooks[hooksProp];\n                    if (_Hooks.passThroughHooks.has(prop)) {\n                        // @ts-expect-error cannot type hook function dynamically\n                        hooks[hooksProp] = (arg) => {\n                            if (this.defaults.async) {\n                                return Promise.resolve(hooksFunc.call(hooks, arg)).then(ret => {\n                                    return prevHook.call(hooks, ret);\n                                });\n                            }\n                            const ret = hooksFunc.call(hooks, arg);\n                            return prevHook.call(hooks, ret);\n                        };\n                    }\n                    else {\n                        // @ts-expect-error cannot type hook function dynamically\n                        hooks[hooksProp] = (...args) => {\n                            let ret = hooksFunc.apply(hooks, args);\n                            if (ret === false) {\n                                ret = prevHook.apply(hooks, args);\n                            }\n                            return ret;\n                        };\n                    }\n                }\n                opts.hooks = hooks;\n            }\n            // ==-- Parse WalkTokens extensions --== //\n            if (pack.walkTokens) {\n                const walkTokens = this.defaults.walkTokens;\n                const packWalktokens = pack.walkTokens;\n                opts.walkTokens = function (token) {\n                    let values = [];\n                    values.push(packWalktokens.call(this, token));\n                    if (walkTokens) {\n                        values = values.concat(walkTokens.call(this, token));\n                    }\n                    return values;\n                };\n            }\n            this.defaults = { ...this.defaults, ...opts };\n        });\n        return this;\n    }\n    setOptions(opt) {\n        this.defaults = { ...this.defaults, ...opt };\n        return this;\n    }\n    lexer(src, options) {\n        return _Lexer.lex(src, options ?? this.defaults);\n    }\n    parser(tokens, options) {\n        return _Parser.parse(tokens, options ?? this.defaults);\n    }\n    parseMarkdown(blockType) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const parse = (src, options) => {\n            const origOpt = { ...options };\n            const opt = { ...this.defaults, ...origOpt };\n            const throwError = this.onError(!!opt.silent, !!opt.async);\n            // throw error if an extension set async to true but parse was called with async: false\n            if (this.defaults.async === true && origOpt.async === false) {\n                return throwError(new Error('marked(): The async option was set to true by an extension. Remove async: false from the parse options object to return a Promise.'));\n            }\n            // throw error in case of non string input\n            if (typeof src === 'undefined' || src === null) {\n                return throwError(new Error('marked(): input parameter is undefined or null'));\n            }\n            if (typeof src !== 'string') {\n                return throwError(new Error('marked(): input parameter is of type '\n                    + Object.prototype.toString.call(src) + ', string expected'));\n            }\n            if (opt.hooks) {\n                opt.hooks.options = opt;\n                opt.hooks.block = blockType;\n            }\n            const lexer = opt.hooks ? opt.hooks.provideLexer() : (blockType ? _Lexer.lex : _Lexer.lexInline);\n            const parser = opt.hooks ? opt.hooks.provideParser() : (blockType ? _Parser.parse : _Parser.parseInline);\n            if (opt.async) {\n                return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)\n                    .then(src => lexer(src, opt))\n                    .then(tokens => opt.hooks ? opt.hooks.processAllTokens(tokens) : tokens)\n                    .then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)\n                    .then(tokens => parser(tokens, opt))\n                    .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)\n                    .catch(throwError);\n            }\n            try {\n                if (opt.hooks) {\n                    src = opt.hooks.preprocess(src);\n                }\n                let tokens = lexer(src, opt);\n                if (opt.hooks) {\n                    tokens = opt.hooks.processAllTokens(tokens);\n                }\n                if (opt.walkTokens) {\n                    this.walkTokens(tokens, opt.walkTokens);\n                }\n                let html = parser(tokens, opt);\n                if (opt.hooks) {\n                    html = opt.hooks.postprocess(html);\n                }\n                return html;\n            }\n            catch (e) {\n                return throwError(e);\n            }\n        };\n        return parse;\n    }\n    onError(silent, async) {\n        return (e) => {\n            e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n            if (silent) {\n                const msg = '<p>An error occurred:</p><pre>'\n                    + escape(e.message + '', true)\n                    + '</pre>';\n                if (async) {\n                    return Promise.resolve(msg);\n                }\n                return msg;\n            }\n            if (async) {\n                return Promise.reject(e);\n            }\n            throw e;\n        };\n    }\n}\n\nconst markedInstance = new Marked();\nfunction marked(src, opt) {\n    return markedInstance.parse(src, opt);\n}\n/**\n * Sets the default options.\n *\n * @param options Hash of options\n */\nmarked.options =\n    marked.setOptions = function (options) {\n        markedInstance.setOptions(options);\n        marked.defaults = markedInstance.defaults;\n        changeDefaults(marked.defaults);\n        return marked;\n    };\n/**\n * Gets the original marked default options.\n */\nmarked.getDefaults = _getDefaults;\nmarked.defaults = exports.defaults;\n/**\n * Use Extension\n */\nmarked.use = function (...args) {\n    markedInstance.use(...args);\n    marked.defaults = markedInstance.defaults;\n    changeDefaults(marked.defaults);\n    return marked;\n};\n/**\n * Run callback for every token\n */\nmarked.walkTokens = function (tokens, callback) {\n    return markedInstance.walkTokens(tokens, callback);\n};\n/**\n * Compiles markdown to HTML without enclosing `p` tag.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options\n * @return String of compiled HTML\n */\nmarked.parseInline = markedInstance.parseInline;\n/**\n * Expose\n */\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\nconst options = marked.options;\nconst setOptions = marked.setOptions;\nconst use = marked.use;\nconst walkTokens = marked.walkTokens;\nconst parseInline = marked.parseInline;\nconst parse = marked;\nconst parser = _Parser.parse;\nconst lexer = _Lexer.lex;\n\nexports.Hooks = _Hooks;\nexports.Lexer = _Lexer;\nexports.Marked = Marked;\nexports.Parser = _Parser;\nexports.Renderer = _Renderer;\nexports.TextRenderer = _TextRenderer;\nexports.Tokenizer = _Tokenizer;\nexports.getDefaults = _getDefaults;\nexports.lexer = lexer;\nexports.marked = marked;\nexports.options = options;\nexports.parse = parse;\nexports.parseInline = parseInline;\nexports.parser = parser;\nexports.setOptions = setOptions;\nexports.use = use;\nexports.walkTokens = walkTokens;\n//# sourceMappingURL=marked.cjs.map\n"],"names":["root","factory","exports","module","define","amd","a","i","self","__webpack_exports__","_getDefaults","async","breaks","extensions","gfm","hooks","pedantic","renderer","silent","tokenizer","walkTokens","changeDefaults","newDefaults","defaults","noopTest","exec","edit","regex","opt","source","obj","replace","name","val","valSource","other","caret","getRegex","RegExp","codeRemoveIndent","outputLinkReplace","indentCodeCompensation","beginningSpace","endingHash","startingSpaceChar","endingSpaceChar","nonSpaceChar","newLineCharGlobal","tabCharGlobal","multipleSpaceGlobal","blankLine","doubleBlankLine","blockquoteStart","blockquoteSetextReplace","blockquoteSetextReplace2","listReplaceTabs","listReplaceNesting","listIsTask","listReplaceTask","anyLine","hrefBrackets","tableDelimiter","tableAlignChars","tableRowBlankLine","tableAlignRight","tableAlignCenter","tableAlignLeft","startATag","endATag","startPreScriptTag","endPreScriptTag","startAngleBracket","endAngleBracket","pedanticHrefTitle","unicodeAlphaNumeric","escapeTest","escapeReplace","escapeTestNoEncode","escapeReplaceNoEncode","unescapeTest","percentDecode","findPipe","splitPipe","slashPipe","carriageReturn","spaceLine","notSpaceStart","endingNewline","listItemRegex","bull","nextBulletRegex","indent","Math","min","hrRegex","fencesBeginRegex","headingBeginRegex","htmlBeginRegex","hr","bullet","lheadingCore","lheading","lheadingGfm","_paragraph","_blockLabel","def","list","_tag","_comment","html","paragraph","blockNormal","blockquote","code","fences","heading","newline","table","text","gfmTable","blockGfm","blockPedantic","br","_punctuation","_punctuationOrSpace","_notPunctuationOrSpace","punctuation","_punctuationGfmStrongEm","emStrongLDelimCore","emStrongLDelim","emStrongLDelimGfm","emStrongRDelimAstCore","emStrongRDelimAst","emStrongRDelimAstGfm","emStrongRDelimUnd","anyPunctuation","autolink","_inlineComment","tag","_inlineLabel","link","reflink","nolink","inlineNormal","_backpedal","blockSkip","del","escape","reflinkSearch","url","inlinePedantic","inlineGfm","inlineBreaks","block","normal","inline","escapeReplacements","getEscapeReplacement","ch","encode","test","cleanUrl","href","encodeURI","splitCells","tableRow","count","cells","match","offset","str","escaped","curr","split","trim","shift","length","at","pop","splice","push","rtrim","c","invert","l","suffLen","charAt","slice","outputLink","cap","raw","lexer","rules","title","state","inLink","token","type","tokens","inlineTokens","_Tokenizer","options","constructor","this","space","src","codeBlockStyle","matchIndentToCode","indentToCode","map","node","matchIndentInNode","indentInNode","join","lang","trimmed","depth","lines","inBlockquote","currentLines","currentRaw","currentText","top","blockTokens","lastToken","oldToken","newText","newToken","substring","isordered","ordered","start","loose","items","itemRegex","endsWithBlankLine","endEarly","itemContents","line","t","repeat","nextLine","trimStart","search","rawLine","nextLineWithoutTabs","ischecked","istask","task","checked","lastItem","trimEnd","spacers","filter","hasMultipleLineBreaks","some","pre","toLowerCase","headers","aligns","rows","item","header","align","row","cell","inRawBlock","trimmedUrl","rtrimSlash","lastParenIndex","b","indexOf","level","findClosingBracket","linkLen","links","emStrong","maskedSrc","prevChar","lLength","rDelim","rLength","delimTotal","midDelimTotal","endReg","lastIndex","lastCharLength","index","codespan","hasNonSpaceChars","hasSpaceCharsOnBothEnds","prevCapZero","inlineText","_Lexer","inlineQueue","Object","create","lex","lexInline","next","lastParagraphClipped","extTokenizer","call","undefined","cutSrc","startBlock","startIndex","Infinity","tempSrc","tempStart","forEach","getStartIndex","errMsg","charCodeAt","console","error","Error","keys","includes","lastIndexOf","keepPrevChar","startInline","_Renderer","parser","langString","parse","parseInline","body","j","listitem","itemBody","checkbox","unshift","tablecell","tablerow","k","content","strong","em","cleanHref","out","image","_TextRenderer","_Parser","textRenderer","anyToken","renderers","genericToken","ret","textToken","_Hooks","static","Set","preprocess","markdown","postprocess","processAllTokens","provideLexer","provideParser","Marked","setOptions","parseMarkdown","Parser","Renderer","TextRenderer","Lexer","Tokenizer","Hooks","args","use","callback","values","concat","tableToken","listToken","childTokens","flat","pack","opts","ext","prevRenderer","apply","extLevel","prop","rendererProp","rendererFunc","tokenizerProp","tokenizerFunc","prevTokenizer","hooksProp","hooksFunc","prevHook","passThroughHooks","has","arg","Promise","resolve","then","packWalktokens","blockType","origOpt","throwError","onError","prototype","toString","all","catch","e","message","msg","reject","markedInstance","marked","getDefaults","__webpack_modules__"],"sourceRoot":""}